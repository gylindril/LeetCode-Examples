/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        bool carry = false;
        ListNode *solution_list = new ListNode();
        ListNode *solution_list_iterator = solution_list;
        ListNode *l1_iterator = l1;
        ListNode *l2_iterator = l2;

        while(l1_iterator != nullptr || l2_iterator != nullptr)
        {
            solution_list_iterator->val = 
                (l1_iterator == nullptr ? 0 : l1_iterator->val) +
                (l2_iterator == nullptr ? 0 : l2_iterator->val) + 
                carry
            ;

            if (solution_list_iterator->val > 9) 
            {
                solution_list_iterator->val -= 10;
                carry = true;
            }

            else carry = false;

            l1_iterator = (l1_iterator == nullptr ? nullptr : l1_iterator->next);
            l2_iterator = (l2_iterator == nullptr ? nullptr : l2_iterator->next);

            if(l1_iterator != nullptr || l2_iterator != nullptr) {
                solution_list_iterator->next = new ListNode();
                solution_list_iterator = solution_list_iterator->next;
            }            
        }   

        //We still have a carry leftover
        if(carry == true)
        {
            solution_list_iterator->next = new ListNode(1);
        }

        return solution_list;
    }
};